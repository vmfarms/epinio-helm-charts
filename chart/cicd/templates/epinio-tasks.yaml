apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: {{ .Release.Name }}-epinio-push-cicd
  labels:
    {{- range $key, $value := .Values.labels }}
    {{ $key }}: {{ $value | quote }} 
    {{- end }}
    {{- include "cicd-bind.labels" . | nindent 4 }}
spec:
  description: Read and display README file.
  workspaces:
    - name: source
  params:
    - name: app-name
      type: string
  steps:
    - computeResources: {}
      image: harbor.beta.stack.io/epinio/epinio-tekton:v1.15.0
      env:
      - name: EPINIO_PASSWORD
        valueFrom: 
          secretKeyRef:
            key: password
            name: epinio-auth
      name: epinio
      script: |
        #!/usr/bin/env bash

        sidepro login --username admin --password $EPINIO_PASSWORD 

        sidepro namespace update {{ .Release.Namespace }} 

        sidepro push --path=$(workspaces.source.path) --name $(params.app-name) 2>&1
---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: {{ .Release.Name }}-epinio-push-pr
  labels:
    {{- range $key, $value := .Values.labels }}
    {{ $key }}: {{ $value | quote }} 
    {{- end }}
    {{- include "cicd-bind.labels" . | nindent 4 }}
spec:
  description: Read and display README file.
  workspaces:
    - name: source
  params:
    - name: pr-number
      type: string
    - name: app-name
      type: string
  steps:
    - computeResources: {}
      image: harbor.beta.stack.io/epinio/epinio-tekton:v1.15.0
      env:
      - name: EPINIO_HOST
        value: {{ .Values.epinioURL }}
      - name: EPINIO_PASSWORD
        valueFrom: 
          secretKeyRef:
            key: password
            name: epinio-auth
      name: epinio
      script: |
        #!/usr/bin/env bash

        app_path=$(workspaces.source.path)

        app_name=$(params.app-name)
        pr_number=$(params.pr-number)

        sidepro login --username admin --password $EPINIO_PASSWORD

        sidepro namespace update {{ .Release.Namespace }}

        cmd="sidepro push --path $app_path --name $app_name-pr-$pr_number"

        app_info=$(sidepro app show samples -o json)
        deployment_name=$(echo $app_info | jq -r '.deployment.name | ltrimstr("r")')

        # Fetch and sanitize helm values
        helm_values=$(helm get values -o json "$deployment_name" | tr -d '\r' | sed 's/[[:cntrl:]]//g')

        # Extract configPaths, env, and secrets using jq
        configPaths=($(echo "$helm_values" | jq -r '.epinio.configpaths // empty | .[].name' | sed 's/-.*//' | sort -u))
        envs=($(echo "$helm_values" | jq -r '.epinio.env // empty | .[] | @base64'))
        secrets=($(echo "$helm_values" | jq -r '.sidepro.secrets // empty | .[]'))

        serviceNames=()  # Initialize an array to hold service names

        for configPath in "${configPaths[@]}"; do
            service_name=$(helm get values -o json "$configPath" | jq -r '.epinio.serviceName // empty')
            serviceNames+=("$service_name")  # Add the service name to the array
        done

        for serviceName in "${serviceNames[@]}"; do
            cmd="$cmd --bind $serviceName"
        done

        # Iterate over envs and append to cmd
        for env in "${envs[@]}"; do
            # Decode the base64-encoded JSON object and extract 'name' and 'value'
            env_json=$(echo "$env" | base64 -d)
            name=$(echo "$env_json" | jq -r '.name')
            value=$(echo "$env_json" | jq -r '.value')
            cmd="$cmd --env $name=$value"
        done

        echo "executing $cmd"
        eval $cmd

        # Iterate over secrets and call the API for each
        for secret in "${secrets[@]}"; do
            api_call="$EPINIO_HOST/api/v1/namespaces/{{ .Release.namespace }}/secrets/$secret/bind/$app_name"
            curl -X POST "$api_call" -u admin:$EPINIO_PASSWORD
        done


---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: {{ .Release.Name }}-epinio-del
  labels:
    {{- range $key, $value := .Values.labels }}
    {{ $key }}: {{ $value | quote }} 
    {{- end }}
    {{- include "cicd-bind.labels" . | nindent 4 }}
spec:
  description: Read and display README file.
  workspaces:
    - name: source
  params:
    - name: pr-number
      type: string
    - name: app-name
      type: string
  steps:
    - computeResources: {}
      image: harbor.beta.stack.io/epinio/epinio-tekton:v1.15.0
      env:
      - name: EPINIO_PASSWORD
        valueFrom: 
          secretKeyRef:
            key: password
            name: epinio-auth
      name: epinio
      script: |
        #!/usr/bin/env bash

        sidepro login --username admin --password $EPINIO_PASSWORD && \
        sidepro namespace update {{ .Release.Namespace }} && \
        sidepro app delete $(params.app-name)-pr-$(params.pr-number)
